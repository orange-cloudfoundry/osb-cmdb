/*
 * Copyright 2002-2019. the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
	repositories {
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
	}

	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
	id "com.gorylenko.gradle-git-properties" version "2.2.0"
}

description = "Osb Cmdb"

// don't publish the jar for the acceptance tests project
configurations.archives.artifacts.clear()

apply plugin: 'org.springframework.boot'

dependencies {
	compile project(":spring-cloud-starter-app-broker-cloudfoundry")
	implementation ("org.springframework.boot:spring-boot-starter-actuator")
	compile("org.springframework.boot:spring-boot-starter-webflux")
	testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
	testCompile("org.junit.jupiter:junit-jupiter-api")
	testCompile("org.springframework.boot:spring-boot-starter-test")
	testCompile("io.projectreactor:reactor-test")
	testCompile("org.assertj:assertj-core")
	//For custom workflows
	testImplementation("org.mockito:mockito-core")
	testImplementation("org.mockito:mockito-junit-jupiter")
}

// build the test broker from /src into a jar that the tests can deploy
test.dependsOn assemble



test {
	maxParallelForks = Runtime.runtime.availableProcessors() - 1 ?: 1

//	// Only run the tests if acceptanceTests is specified
//	onlyIf {
//		project.hasProperty("acceptanceTests")
//	}
	systemProperty "tests.broker-app-path", "${buildDir}/libs/osb-cmdb.jar"
	// Pass relevant java properties to the test task
	systemProperties << System.properties.findAll { it.key.startsWith("spring.") }
}

gitProperties {
	extProperty = 'gitProps' // git properties will be put in a map at project.ext.gitProps
}
generateGitProperties.outputs.upToDateWhen { false } // make sure the generateGitProperties task always executes (even when git.properties is not changed)

//Add SCM information to jar.
//See https://github.com/n0mer/gradle-git-properties#other-usages
bootJar {
	manifest {
		attributes(
			'SCM-Revision': "${-> project.ext.gitProps['git.commit.id.describe']} with message ${-> project.ext.gitProps['git.commit.message.short']} from branch=${-> project.ext.gitProps['git.branch']} user.name=${-> project.ext.gitProps['git.commit.user.name']} at time=${-> project.ext.gitProps['git.commit.time']}"  // Use GString lazy evaluation to delay until git properties are populated
		)
	}
}